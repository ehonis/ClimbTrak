generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Route {
    id          String            @id @default(cuid())
    title       String
    setDate     DateTime          @default(now())
    color       String // Set a default color value
    grade       String
    type        String
    score       Int               @default(0) // New score field with a default value of 0
    completions RouteCompletion[] // One-to-many relationship with RouteCompletion
    attempts    RouteAttempt[] // One-to-many relationship with RouteAttempt
}

model User {
    id          String            @id @default(cuid())
    username    String            @unique
    password    String
    email       String            @unique
    completions RouteCompletion[] // One-to-many relationship with RouteCompletion
    attempts    RouteAttempt[] // One-to-many relationship with RouteAttempt
    score       Int               @default(0)
    badges      Badge[]
    admin       Boolean           @default(false)
}

model Badge {
    id    Int    @id @default(autoincrement())
    name  String
    users User[]
}

model RouteCompletion {
    id             Int      @id @default(autoincrement())
    user           User     @relation(fields: [userId], references: [id])
    userId         String
    route          Route    @relation(fields: [routeId], references: [id])
    routeId        String
    completionDate DateTime @default(now())
}

model RouteAttempt {
    id          Int      @id @default(autoincrement())
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    route       Route    @relation(fields: [routeId], references: [id])
    routeId     String
    attemptDate DateTime @default(now())
}
